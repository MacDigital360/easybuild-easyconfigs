# This easyconfig was created by the BEAR Software team at the University of Birmingham.
easyblock = 'PythonPackage'

name = 'SoftRas'
version = 'f644279'
versionsuffix = '-Python-%(pyver)s-PyTorch-1.4.0'

homepage = "https://github.com/ShichenLiu/SoftRas"
description = """Soft Rasterizer (SoftRas) is a truly differentiable renderer framework with a novel formulation that
 views rendering as a differentiable aggregating process that fuses probabilistic contributions of all mesh triangles
 with respect to the rendered pixels. Thanks to such "soft" formulation, our framework is able to (1) directly render
 colorized mesh using differentiable functions and (2) back-propagate efficient supervision signals to mesh vertices
 and their attributes (color, normal, etc.) from various forms of image representations, including silhouette, shading
 and color images."""

toolchain = {'name': 'fosscuda', 'version': '2019b'}

dependencies = [
    ('Python', '3.7.4'),
    ('PyTorch', '1.4.0', '-Python-%(pyver)s'),
    ('SciPy-bundle', '2019.10', '-Python-%(pyver)s'),
    ('scikit-image', '0.16.2', '-Python-%(pyver)s'),
    ('tqdm', '4.41.1'),
    ('torchvision', '0.5.0', versionsuffix),
]

source_urls = ['https://github.com/ShichenLiu/SoftRas/archive/']
sources = ['%(version)s.tar.gz']
checksums = ['4270010e715d44a852cc81187256f1f313a95e2301a1494363007afbf6732260']

download_dep_fail = True
sanity_pip_check = True
use_pip = True
options = {'modulename': 'soft_renderer'}

import subprocess as _subprocess  # NOQA
_arch = _subprocess.check_output(['uname', '-m'], universal_newlines=True).strip()
if _arch == 'ppc64le':
    patches = ['%(name)s-%(version)s_ppc64le.patch']
    checksums.append('7ca9c0580849889aa79d5d5e713eea8450b18daa0122b3d2cab3613831d89344')

moduleclass = 'vis'
